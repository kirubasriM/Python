class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        # Define INT_MIN and INT_MAX for 32-bit integer constraints
        INT_MIN, INT_MAX = -2**31, 2**31 - 1
        
        # Handle the case where division result might overflow
        if dividend == INT_MIN and divisor == -1:
            return INT_MAX
        
        # Determine the sign of the result
        negative = (dividend < 0) ^ (divisor < 0)
        
        # Work with absolute values
        dividend, divisor = abs(dividend), abs(divisor)
        
        quotient = 0
        
        # Use bitwise shift for fast subtraction
        while dividend >= divisor:
            temp, multiple = divisor, 1
            while dividend >= (temp << 1):
                temp <<= 1
                multiple <<= 1
            
            dividend -= temp
            quotient += multiple
        
        # Apply the sign
        quotient = -quotient if negative else quotient
        
        # Ensure result is within the 32-bit integer range
        return max(INT_MIN, min(INT_MAX, quotient))
